
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/grids/extract-topography.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_grids_extract-topography.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_grids_extract-topography.py:


Extract Topography
~~~~~~~~~~~~~~~~~~

This example will demonstrate how to add a cell data field to an input data
set that defines whether that cell should be active. The activity of the cell
is determined by whether it is beneath and input topography surface.


This filter adds a new cell data field to an input data source defining whether
that cell is beneath some input topography surface.

This example demos :class:`PVGeo.grids.ExtractTopography`

We add a cell data field to the input data set as this allows us to use a wide
range of input data types. We also add this data array as it will enable users
to create model discretizations within ParaView for export to external
processing software that need the entire model discretization with an active
cells field.

.. GENERATED FROM PYTHON SOURCE LINES 22-31

.. code-block:: default

    import os

    # sphinx_gallery_thumbnail_number = 6
    import pyvista
    from pyvista import examples

    from PVGeo.grids import ExtractTopography
    from PVGeo.model_build import CreateTensorMesh








.. GENERATED FROM PYTHON SOURCE LINES 32-39

For the grid data set, let's use one of the Model Building sources
with the following parameters:

- Origin: ``[793000, 9192500, 2690]``
- X Cells: ``'1000 500 50*250 500 1000'``
- Y Cells: ``'1000 500 55*250 500 1000'``
- Z Cells: ``'30*100.0 5*250.0 500'``

.. GENERATED FROM PYTHON SOURCE LINES 39-49

.. code-block:: default


    mesh = CreateTensorMesh(
        origin=[793000, 9192500, 2690],
        xcellstr='1000 500 50*250 500 1000',
        ycellstr='1000 500 55*250 500 1000',
        zcellstr='30*100.0 5*250.0 500',
    ).apply()

    mesh.plot(show_grid=True, color=True, show_edges=True)




.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_001.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 50-51

Now load the topography file from the example data:

.. GENERATED FROM PYTHON SOURCE LINES 51-61

.. code-block:: default

    link = 'https://dl.dropbox.com/s/gw5v3tiq68oge3l/Example-Extract-Topo.zip?dl=0'
    examples.downloads._retrieve_file(link, 'Example-Extract-Topo.zip')
    topo = pyvista.read(os.path.join(pyvista.EXAMPLES_PATH, 'topo.vtk'))

    p = pyvista.Plotter()
    p.add_mesh(topo, cmap='terrain')
    p.add_mesh(mesh, color=True, show_edges=False, opacity=0.75)
    p.show_grid()
    p.show()




.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_002.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-65

Now that you have the topography and a grid data set,
let's go ahead and use the **Extract Topography** filter. Be sure to properly
select the inputs to the algorithm.

.. GENERATED FROM PYTHON SOURCE LINES 65-68

.. code-block:: default

    extracted = ExtractTopography().apply(mesh, topo)
    extracted.plot(scalars='Extracted')




.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_003.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 69-77

op='underneath', tolerance=0.001, offset=0.0, invert=False, remove=False
This will show the cells that are active underneath the topography surface
(0 for above surface and 1 for below surface). Now we can threshold this gridded
data set to remove parts of the model that are above the topography surface by
applying a *Threshold* filter to chop out all values below 1.

The resulting grid with cells above the topography extracted will look like the
rendering below:

.. GENERATED FROM PYTHON SOURCE LINES 77-80

.. code-block:: default

    threshed = extracted.threshold(0.5, scalars='Extracted')
    threshed.plot(color=True, show_edges=True)




.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_004.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 81-82

How well did this remove cells above the topography surface?

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default


    p = pyvista.Plotter()
    p.add_mesh(topo, cmap='terrain')
    p.add_mesh(threshed, color=True, show_edges=True)
    p.show_grid()
    p.show()




.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_005.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-92

Is that extraction too close to the topography surface? To better extract the
topographic surface, you can set a tolerance:

.. GENERATED FROM PYTHON SOURCE LINES 92-100

.. code-block:: default

    extracted = ExtractTopography(tolerance=100.0, remove=True).apply(mesh, topo)

    p = pyvista.Plotter()
    p.add_mesh(topo, cmap='terrain')
    p.add_mesh(extracted, color=True, show_edges=True)
    p.show_grid()
    p.show()




.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_006.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 101-102

Note that there are other extraction operations like an ``'intersection'``:

.. GENERATED FROM PYTHON SOURCE LINES 102-106

.. code-block:: default

    extracted = ExtractTopography(op='intersection', remove=True, tolerance=100.0).apply(
        mesh, topo
    )
    extracted.plot(color=True, show_edges=True)



.. image-sg:: /examples/grids/images/sphx_glr_extract-topography_007.png
   :alt: extract topography
   :srcset: /examples/grids/images/sphx_glr_extract-topography_007.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  6.734 seconds)


.. _sphx_glr_download_examples_grids_extract-topography.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: extract-topography.py <extract-topography.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: extract-topography.ipynb <extract-topography.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
