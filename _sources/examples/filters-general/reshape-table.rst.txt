
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/filters-general/reshape-table.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_filters-general_reshape-table.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_filters-general_reshape-table.py:


Reshape Table
~~~~~~~~~~~~~

This example will demonstrate how to reshape an input table as though it were a 2D array.

This filter will take a `vtkTable` object and reshape it. This filter essentially treats `vtkTable`s as 2D matrices and reshapes them using `numpy.reshape` in a C contiguous manner. Unfortunately, data fields will be renamed arbitrarily because VTK data arrays require a name.

This example demos :class:`PVGeo.filters.ReshapeTable`

.. GENERATED FROM PYTHON SOURCE LINES 12-17

.. code-block:: Python

    import numpy as np
    import pyvista as pv

    from PVGeo.filters import ReshapeTable








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Create some input table

.. GENERATED FROM PYTHON SOURCE LINES 19-34

.. code-block:: Python

    t0 = pv.Table()
    # Populate the tables
    arrs = [None, None, None]
    n = 400
    ncols = 2
    nrows = int(n * len(arrs) / ncols)
    titles = ("Array 0", "Array 1", "Array 2")
    arrs[0] = np.random.random(n)
    arrs[1] = np.random.random(n)
    arrs[2] = np.random.random(n)

    t0[titles[0]] = arrs[0]
    t0[titles[1]] = arrs[1]
    t0[titles[2]] = arrs[2]








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Use the filter to reshape the table

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: Python

    order = "F"
    newtitles = ["Title %d" % i for i in range(ncols)]
    output = ReshapeTable(order=order, ncols=ncols, nrows=nrows, names=newtitles).apply(t0)
    output






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Header</th><th>Data Arrays</th></tr><tr><td>
    <table style='width: 100%;'>
    <tr><th>Table</th><th>Information</th></tr>
    <tr><td>N Rows</td><td>600</td></tr>
    <tr><td>N Arrays</td><td>2</td></tr>
    </table>

    </td><td>
    <table style='width: 100%;'>
    <tr><th>Name</th><th>Type</th><th>N Comp</th><th>Min</th><th>Max</th></tr>
    <tr><td>Title 0</td><td>float64</td><td>1</td><td>1.803e-04</td><td>9.989e-01</td></tr>
    <tr><td>Title 1</td><td>float64</td><td>1</td><td>2.845e-03</td><td>9.971e-01</td></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 42-43

Check the output

.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: Python

    tarr = np.zeros((nrows, ncols))
    for i in range(ncols):
        tarr[:, i] = output[i]
    arrs = np.array(arrs).T
    arrs = arrs.flatten()
    arrs = np.reshape(arrs, (nrows, ncols), order=order)
    assert tarr.shape == arrs.shape
    assert np.allclose(tarr, arrs)








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.003 seconds)


.. _sphx_glr_download_examples_filters-general_reshape-table.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: reshape-table.ipynb <reshape-table.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: reshape-table.py <reshape-table.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
