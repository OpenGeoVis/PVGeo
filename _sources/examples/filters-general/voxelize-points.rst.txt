
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/filters-general/voxelize-points.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_filters-general_voxelize-points.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_filters-general_voxelize-points.py:


Voxelize Points
~~~~~~~~~~~~~~~

This example will demonstrate how to connect a set of points defined on a
regular grid to create a `vtkUnstructuredGrid` which can be used to perform
volumetric operations.


This example demos :class:`PVGeo.filters.VoxelizePoints`

.. GENERATED FROM PYTHON SOURCE LINES 12-20

.. code-block:: default

    # sphinx_gallery_thumbnail_number = 2
    import pyvista
    from pyvista import examples
    import numpy as np
    import pandas as pd
    import PVGeo
    from PVGeo.filters import VoxelizePoints








.. GENERATED FROM PYTHON SOURCE LINES 21-22

Download sample data files and keep track of names:

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    url = 'https://github.com/OpenGeoVis/PVGeo/raw/master/tests/data/fault_points.csv'
    fault_file, _ = examples.downloads._retrieve_file(url, 'fault_points.csv')








.. GENERATED FROM PYTHON SOURCE LINES 26-34

Let's go ahead and load a simple file that has XYZ coordinates and a boolean
array for fault presence. This point cloud makes some sort of regular grid,
but we have forgotten the deatials of the cell spacings and local coordinate
rotations.

We will read in this data with ``pandas`` and send it to the
:func:`PVGeo.points_to_poly_data` helper to create a :class:`pyvista.PolyData`
object (essentially a point cloud).

.. GENERATED FROM PYTHON SOURCE LINES 34-37

.. code-block:: default

    points = pd.read_csv(fault_file)
    print(points[0:2])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

                X            Y       Z  Fault
    0  326819.497  4407450.636  1287.5      0
    1  326834.340  4407470.753  1287.5      0




.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default


    vtkpoints = PVGeo.points_to_poly_data(points)
    print(vtkpoints)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    PolyData (0x7f9f05dd01c0)
      N Cells:      499200
      N Points:     499200
      X Bounds:     3.268e+05, 3.302e+05
      Y Bounds:     4.406e+06, 4.410e+06
      Z Bounds:     1.250e+01, 1.288e+03
      N Arrays:     1





.. GENERATED FROM PYTHON SOURCE LINES 43-52

Note that we have a :class:`pyvista.PolyData` object now which allows us to do
all types of immediate plotting of our data. First, lets threshold our points
as the point cloud has a bunch of zeros and ones throughout the dataspace to
describe the presence of a fault.

To threshold the points, we call the threshold filter directly on our data
object and pass the thresholding value. We can then plot the result by
calling the plot function. (Note: change the notebook parameter to
``False`` for an interactive window)

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: default

    vtkpoints.plot(clim=[0,1], point_size=1)




.. image:: /examples/filters-general/images/sphx_glr_voxelize-points_001.png
    :alt: voxelize points
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(334141.1509516418, 4413705.151451642, 6293.877451641769),
     (328497.2735, 4408061.274, 650.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 55-71

Points to Voxelized Volume
++++++++++++++++++++++++++

The above figure is pretty cool! But its a point cloud which means out
filtering options are pretty limited. Fortunately, we know that the point
cloud represents some sort of regularized gridded volume of data and PVGeo
has a filter to recover that volume. This will allow further volumetric
operations can be performed with other PVGeo or VTK filters.

Remember that these points are rotated and we do not know the cell sizes...
this is okay! The VoxelizePoints filter from PVGeo will handle the recovery of
the coordinate rotation and grid our data without running an interpolation
scheme. The VoxelizePoints filter assumes that the points are structured on some
rotated XY-plane with regular cell spacings and does the rest on its own!
Check out VoxelizePoints code docs for more details.
The full pipeline method

.. GENERATED FROM PYTHON SOURCE LINES 71-81

.. code-block:: default

    print('Voxelizing... ', end='')
    voxelizer = PVGeo.filters.VoxelizePoints()
    grid = voxelizer.apply(vtkpoints)
    print('done.')

    # Output the results
    print('Recovered Angle (deg.): %.3f' % voxelizer.get_angle())
    print('Recovered Cell Sizes: (%.2f, %.2f, %.2f)' % voxelizer.get_spacing())
    print(grid)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Voxelizing... done.
    Recovered Angle (deg.): 53.550
    Recovered Cell Sizes: (25.00, 25.00, 25.00)
    UnstructuredGrid (0x7f9f05d1bf40)
      N Cells:      499200
      N Points:     524064
      X Bounds:     3.268e+05, 3.302e+05
      Y Bounds:     4.406e+06, 4.410e+06
      Z Bounds:     0.000e+00, 1.300e+03
      N Arrays:     3





.. GENERATED FROM PYTHON SOURCE LINES 82-83

And now we can plot the voxelized volume

.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: default

    grid.plot()





.. image:: /examples/filters-general/images/sphx_glr_voxelize-points_002.png
    :alt: voxelize points
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(334197.63537062117, 4413761.117303883, 6352.837209322908),
     (328494.79816129827, 4408058.28009456, 650.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 87-93

Filter Volumetric Data
++++++++++++++++++++++

Now lets use one of `PyVista`'s filters to create slices of the thresholded
dataset. Specifically, we are using the ``slice_orthogonal`` filter that will
create 3 orthogonal slices through a data volume.

.. GENERATED FROM PYTHON SOURCE LINES 93-96

.. code-block:: default

    slices = grid.slice_orthogonal()
    print(slices)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    MultiBlock (0x7f9f05d1ba60)
      N Blocks:     3
      X Bounds:     326804.336, 330185.260
      Y Bounds:     4406253.954, 4409862.606
      Z Bounds:     0.000, 1300.000





.. GENERATED FROM PYTHON SOURCE LINES 97-98

And let's use a ``clip`` filter:

.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: default

    clip = grid.clip(normal='x').clip(normal='-y').threshold(0.5)








.. GENERATED FROM PYTHON SOURCE LINES 101-102

Now display the slices and clipped volume

.. GENERATED FROM PYTHON SOURCE LINES 102-108

.. code-block:: default


    p = pyvista.Plotter()
    p.add_mesh(slices)
    p.add_mesh(clip)
    p.show_grid()
    p.show()



.. image:: /examples/filters-general/images/sphx_glr_voxelize-points_003.png
    :alt: voxelize points
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(334197.63537062117, 4413761.117303883, 6352.837209322908),
     (328494.79816129827, 4408058.28009456, 650.0),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.150 seconds)


.. _sphx_glr_download_examples_filters-general_voxelize-points.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: voxelize-points.py <voxelize-points.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: voxelize-points.ipynb <voxelize-points.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
