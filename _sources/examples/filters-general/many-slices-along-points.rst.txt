
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/filters-general/many-slices-along-points.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_filters-general_many-slices-along-points.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_filters-general_many-slices-along-points.py:


Many Slices Along Points
~~~~~~~~~~~~~~~~~~~~~~~~

This example will demonstrate how to slice a 3D data source along some arbitrary
line or sequence of points specified in another data source to have many slices
of the 3D data perpendicular to that travel path.

Sometimes, we desire to take a path through a model and construct various slices
along that path. This example will outline a filter we have developed to take
some 3D data set on the pipeline and construct various slices of that model
along an input path. The slices will be perpendicular to that path at specified
intervals. In this example, we also demonstrate a filter that comes native in
ParaView to slice that entire model along the travel path to have a single
warped slice.

This example demos :class:`PVGeo.filters.ManySlicesAlongPoints`

.. GENERATED FROM PYTHON SOURCE LINES 20-22

.. code-block:: Python

    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 23-24

sphinx_gallery_thumbnail_number = 3

.. GENERATED FROM PYTHON SOURCE LINES 24-30

.. code-block:: Python

    import pyvista
    from pyvista import examples

    import PVGeo
    from PVGeo.filters import ManySlicesAlongPoints








.. GENERATED FROM PYTHON SOURCE LINES 31-32

Load a volumetric model to be sliced from pyvista's examples

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: Python

    model = examples.load_channels()
    model.plot()





.. image-sg:: /examples/filters-general/images/sphx_glr_many-slices-along-points_001.png
   :alt: many slices along points
   :srcset: /examples/filters-general/images/sphx_glr_many-slices-along-points_001.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 36-38

Create a series of points that move through that model. These are the points
we will use to slice the volume.

.. GENERATED FROM PYTHON SOURCE LINES 38-57

.. code-block:: Python



    def path(y):
        """Equation: x = a(y-h)^2 + k"""
        a = 110.0 / 160.0**2
        x = a * y**2 + 0.0
        return x, y


    x, y = path(np.arange(model.bounds[2], model.bounds[3], 15.0))
    zo = np.linspace(9.0, 11.0, num=len(y))
    # Make a VTK data object for the filter to use
    points = pyvista.PolyData(np.c_[x, y, zo])

    p = pyvista.Plotter()
    p.add_mesh(model.outline(), color="k")
    p.add_mesh(points, point_size=10.0)
    p.show()





.. image-sg:: /examples/filters-general/images/sphx_glr_many-slices-along-points_002.png
   :alt: many slices along points
   :srcset: /examples/filters-general/images/sphx_glr_many-slices-along-points_002.png
   :class: sphx-glr-single-img







.. GENERATED FROM PYTHON SOURCE LINES 58-63

Now we can use the **Many Slices Along Points** filter.
Specify the model as the  dataset input and the points as the points input
to that filter and apply the algorithm.
That's it! The filter should be applied and you can fine tune the number of
slices to what you prefer!

.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: Python


    slices = ManySlicesAlongPoints(n_slices=5).apply(points, model)
    slices






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='width: 100%;'><tr><th>Information</th><th>Blocks</th></tr><tr><td>
    <table>
    <tr><th>MultiBlock</th><th>Values</th></tr>
    <tr><td>N Blocks</td><td>6</td></tr>
    <tr><td>X Bounds</td><td>0.000, 250.000</td></tr>
    <tr><td>Y Bounds</td><td>0.000, 250.000</td></tr>
    <tr><td>Z Bounds</td><td>0.000, 100.000</td></tr>
    </table>

    </td><td>
    <table>
    <tr><th>Index</th><th>Name</th><th>Type</th></tr>
    <tr><th>0</th><th>Slice00</th><th>PolyData</th></tr>
    <tr><th>1</th><th>Slice01</th><th>PolyData</th></tr>
    <tr><th>2</th><th>Slice02</th><th>PolyData</th></tr>
    <tr><th>3</th><th>Slice03</th><th>PolyData</th></tr>
    <tr><th>4</th><th>Slice04</th><th>PolyData</th></tr>
    <tr><th>5</th><th>Slice05</th><th>PolyData</th></tr>
    </table>

    </td></tr> </table>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: Python

    line = PVGeo.filters.AddCellConnToPoints().apply(points)
    p = pyvista.Plotter()
    p.add_mesh(line, line_width=10)
    p.add_mesh(slices, lighting=False)
    p.add_mesh(model.outline(), color="k")
    p.show()




.. image-sg:: /examples/filters-general/images/sphx_glr_many-slices-along-points_003.png
   :alt: many slices along points
   :srcset: /examples/filters-general/images/sphx_glr_many-slices-along-points_003.png
   :class: sphx-glr-single-img








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.592 seconds)


.. _sphx_glr_download_examples_filters-general_many-slices-along-points.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: many-slices-along-points.ipynb <many-slices-along-points.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: many-slices-along-points.py <many-slices-along-points.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
