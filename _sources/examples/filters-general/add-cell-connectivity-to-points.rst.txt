
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/filters-general/add-cell-connectivity-to-points.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_filters-general_add-cell-connectivity-to-points.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_filters-general_add-cell-connectivity-to-points.py:


Add Cell Connectivity To Points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Example for :class:`PVGeo.filters.AddCellConnToPoints`

This filter will add **linear** cell connectivity between scattered points.
You have the option to add ``VTK_LINE`` or ``VTK_POLYLINE`` connectivity.
``VTK_LINE`` connectivity makes a straight line between the points in order
(either in the order by index or using a nearest neighbor calculation).
The ``VTK_POLYLINE`` adds polyline connectivity between all points as one
spline (either in the order by index or using a nearest neighbor calculation).

.. GENERATED FROM PYTHON SOURCE LINES 16-17

sphinx_gallery_thumbnail_number = 2

.. GENERATED FROM PYTHON SOURCE LINES 17-23

.. code-block:: Python

    import numpy as np
    import pyvista

    from PVGeo import points_to_poly_data
    from PVGeo.filters import AddCellConnToPoints








.. GENERATED FROM PYTHON SOURCE LINES 24-25

First, lets generate some points which we'd like to connect

.. GENERATED FROM PYTHON SOURCE LINES 25-44

.. code-block:: Python



    def path1(y):
        """Equation: x = a(y-h)^2 + k"""
        a = -110.0 / 160.0**2
        x = a * y**2 + 110.0
        idxs = np.argwhere(x > 0)
        return x[idxs][:, 0], y[idxs][:, 0]


    x, y = path1(np.arange(0.0, 200.0, 25.0))
    zo = np.linspace(9.0, 11.0, num=len(y))
    coords = np.vstack((x, y, zo)).T
    # Shuffle points to demonstrate value of Nearest Neighbor
    np.random.shuffle(coords)

    # Make a VTK data object for the filter to use
    vtkPoints = points_to_poly_data(coords)








.. GENERATED FROM PYTHON SOURCE LINES 45-53

Apply the Filter
++++++++++++++++

Now that you have the points generated, lets go ahead and apply
the **Add Cell Connectivity To Points** filter from
*Filters->PVGeo: General Filters->Add Cell Connectivity To Points*.
The output data should look really wacky and incorrectly built like the image
below; this is good.

.. GENERATED FROM PYTHON SOURCE LINES 53-60

.. code-block:: Python

    line = AddCellConnToPoints().apply(vtkPoints)

    p = pyvista.Plotter()
    p.add_mesh(line, line_width=5, point_size=10)
    p.show()









.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/filters-general/images/sphx_glr_add-cell-connectivity-to-points_001.png
        :alt: add cell connectivity to points
        :srcset: /examples/filters-general/images/sphx_glr_add-cell-connectivity-to-points_001.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/PVGeo/PVGeo/docs/source/examples/filters-general/images/sphx_glr_add-cell-connectivity-to-points_001.vtksz






.. GENERATED FROM PYTHON SOURCE LINES 61-67

Remember that in the script given above we shuffle the points to demonstrate
that the points make a usable line but we need to reconstruct the order of the
points. We do this by using the *Use Nearest Nbr Approx* checkbox; this will
ensure that a usable path is generate from the points.
Go ahead and use the ``nearest_nbr`` argument for the algorithm.
Now it looks good (see image below)!

.. GENERATED FROM PYTHON SOURCE LINES 67-75

.. code-block:: Python



    # Use the filter: Here is vtkPolyData containing the connected line:
    line_o = AddCellConnToPoints(nearest_nbr=True).apply(vtkPoints)

    p = pyvista.Plotter()
    p.add_mesh(line_o, line_width=5, point_size=10)
    p.show()







.. tab-set::



   .. tab-item:: Static Scene



            
     .. image-sg:: /examples/filters-general/images/sphx_glr_add-cell-connectivity-to-points_002.png
        :alt: add cell connectivity to points
        :srcset: /examples/filters-general/images/sphx_glr_add-cell-connectivity-to-points_002.png
        :class: sphx-glr-single-img
     


   .. tab-item:: Interactive Scene



       .. offlineviewer:: /home/runner/work/PVGeo/PVGeo/docs/source/examples/filters-general/images/sphx_glr_add-cell-connectivity-to-points_002.vtksz







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 3.011 seconds)


.. _sphx_glr_download_examples_filters-general_add-cell-connectivity-to-points.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: add-cell-connectivity-to-points.ipynb <add-cell-connectivity-to-points.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: add-cell-connectivity-to-points.py <add-cell-connectivity-to-points.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
